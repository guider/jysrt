import chalk from 'chalk';
import * as fs from 'fs-extra';
import { map, parse } from 'subtitle';
// import { parse, resync, stringify } from 'subtitle';
import { v4 as uuidV4 } from 'uuid';
/* cSpell:disable */
import formater from 'xml-formatter';
/* cSpell:enable */
import { resources } from './constants/resources';
import { CueTemplate, MainTemplate } from './template';
function runParse(params) {
    const list = [];
    fs.createReadStream(params.srtPath)
        .pipe(parse())
        .pipe(map((node) => {
        if (node.type === 'cue') {
            // eslint-disable-next-line functional/immutable-data
            node.data.text = node.data.text.replace(/"/g, '&#34;');
        }
        return node;
    }))
        .on('data', (node) => {
        // eslint-disable-next-line functional/immutable-data
        list.push(node);
    })
        .on('error', (err) => {
        console.log(chalk.blue.bgRed.bold(err));
    })
        .on('finish', () => {
        const lastCue = list.slice(-1)[0];
        const totalCueTime = lastCue.data.end;
        const fileName = params.srtPath.replace(/(.+)\/(.+)$/, '$2');
        const projectName = params.projectName || fileName;
        /* cSpell:disable */
        const outputPath = params.outputPath + '/' + fileName + '.fcpxml';
        const eventName = params.eventName || 'srt2fcpxml_node';
        /* cSpell:enable */
        const resourceConfig = resources[params.rateKey];
        const gap = params.gap;
        const isUsePlugin = params.isUsePlugin;
        const config = {
            cuesTemplate: CueTemplate(list, resourceConfig, gap, isUsePlugin).join(''),
            project: {
                name: projectName,
                uid: uuidV4(),
                modDate: 'today',
            },
            event: {
                name: eventName,
                uid: uuidV4(),
            },
            totalCueTime: totalCueTime,
            resources: resourceConfig,
            gap,
            isUsePlugin,
        };
        const fcpXMl = MainTemplate(config, resourceConfig);
        const fcpXmlFile = fs.createWriteStream(outputPath);
        /* cSpell:disable */
        const formattedXml = formater(fcpXMl, {
            indentation: '  ',
            filter: (node) => {
                return node;
            },
            collapseContent: true,
            lineSeparator: '\n',
        });
        fcpXmlFile.write(formattedXml);
        fcpXmlFile.end(() => {
            console.log(chalk.greenBright.bold(`success! the output file are ${outputPath}`));
        });
    });
}
export const Parser = (params) => {
    return runParse(params);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0IsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsdURBQXVEO0FBQ3ZELE9BQU8sRUFBRSxFQUFFLElBQUksTUFBTSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLG9CQUFvQjtBQUNwQixPQUFPLFFBQVEsTUFBTSxlQUFlLENBQUM7QUFFckMsbUJBQW1CO0FBQ25CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFXLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQVdoRSxTQUFTLFFBQVEsQ0FBQyxNQUFtQjtJQUNuQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7SUFDaEIsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDaEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2IsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ1gsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtZQUN2QixxREFBcUQ7WUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN4RDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDLENBQ0g7U0FDQSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbkIscURBQXFEO1FBQ3JELElBQUksQ0FBQyxJQUFJLENB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