#!/usr/bin/env node
export * from './lib/async';
export * from './lib/number';
export { Parser } from './parser';
import * as path from 'path';
import confirm from '@inquirer/confirm';
import * as root from 'app-root-path';
import chalk from 'chalk';
import { program } from 'commander';
import * as fs from 'fs-extra';
import { checkRate, checkSrtPath, copyPlugin, formateRateKey, } from './lib/helper';
import { Parser } from './parser';
const packageJson = fs.readJsonSync(path.resolve(__dirname, '../../', 'package.json'));
program
    .version(packageJson.version)
    .requiredOption('-s, --srt <source>', 'srt file path')
    .option('-o, --output <output>', 'output dir name [default current]')
    .option('-r, --rate <rate>', 'rate: default 30, AKA:23.98,24,25,29.87,30,50,59.94,60')
    .option('-e, --event <event>', 'event name')
    .option('-p, --project <project>', 'project name')
    .option('-c, --custom', 'use custom plugin')
    .option('-g, --gap <gap>', 'gap: number,default 3.6');
program.parse(process.argv);
const mainProcess = (isUsePlugin = false) => {
    if (program.opts().srt) {
        const srtParam = program.opts().srt;
        const outputParam = program.opts().output || root.path;
        const rateParam = formateRateKey(program.opts().rate);
        /* cSpell:disable */
        const eventName = program.opts().event || 'srt2fcpxml_node';
        const projectName = program.opts().project;
        const gap = parseFloat(program.opts().gap);
        if (checkSrtPath(srtParam) && checkRate(rateParam)) {
            Parser({
                srtPath: srtParam,
                outputPath: outputParam,
                eventName,
                rateKey: rateParam,
                projectName,
                gap,
                isUsePlugin,
            });
        }
    }
};
if (program.opts().custom) {
    (async () => {
        const answer = await confirm({
            message: 'Hey, Do you want use custom subtitle fcpx plugin? \n will copy file to your \n ~/Movies/Motion Templates.localized/Titles.localized ',
        });
        if (answer) {
            copyPlugin();
        }
        else {
            console.log(chalk.yellowBright.bold('please copy that plugin by yourself'));
        }
        mainProcess(true);
    })();
}
else {
    mainProcess();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGNBQWMsYUFBYSxDQUFDO0FBQzVCLGNBQWMsY0FBYyxDQUFDO0FBQzdCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFFN0IsT0FBTyxPQUFPLE1BQU0sbUJBQW1CLENBQUM7QUFDeEMsT0FBTyxLQUFLLElBQUksTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFL0IsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLGNBQWMsR0FDZixNQUFNLGNBQWMsQ0FBQztBQUN0QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FDbEQsQ0FBQztBQUNGLE9BQU87S0FDSixPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztLQUM1QixjQUFjLENBQUMsb0JBQW9CLEVBQUUsZUFBZSxDQUFDO0tBQ3JELE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSxtQ0FBbUMsQ0FBQztLQUNwRSxNQUFNLENBQ0wsbUJBQW1CLEVBQ25CLHdEQUF3RCxDQUN6RDtLQUNBLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxZQUFZLENBQUM7S0FDM0MsTUFBTSxDQUFDLHlCQUF5QixFQUFFLGNBQWMsQ0FBQztLQUNqRCxNQUFNLENBQUMsY0FBYyxFQUFFLG1CQUFtQixDQUFDO0tBQzNDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0FBRXhELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRTVCLE1BQU0sV0FBVyxHQUFHLENBQUMsV0FBVyxHQUFHLEtBQUssRUFBRSxFQUFFO0lBQzFDLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRTtRQUN0QixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ3BDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztRQUN2RCxNQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RELG9CQUFvQjtRQUNwQixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxJQUFJLGlCQUFpQixDQUFDO1FBQzVELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7UUFDM0MsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUzQyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbEQsTUFBTSxDQUFDO2dCQUNMLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixVQUFVLEVBQUUsV0FBVztnQkFDdkIsU0FBUztnQkFDVCxPQUFPLEVBQUUsU0FBUztnQkFDbEIsV0FBVztnQkFDWCxHQUFHO2dCQUNILFdBQVc7YUFDWixDQUFDLENBQUM7U0FDSjtLQUNGO0FBQ0gsQ0FBQyxDQUFDO0FBQ0YsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFO0lBQ3pCLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDVixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQztZQUMzQixPQUFPLEVBQ0wsc0lBQXNJO1NBQ3pJLENBQUMsQ0FBQztRQUNILElBQUksTUFBTSxFQUFFO1lBQ1YsVUFBVSxFQUFFLENBQUM7U0FDZDthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FDVCxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxDQUMvRCxDQUFDO1NBQ0g7UUFDRCxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztDQUNOO0tBQU07SUFDTCxXQUFXLEVBQUUsQ0FBQztDQUNmIn0=