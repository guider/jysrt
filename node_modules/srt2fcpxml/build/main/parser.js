"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const chalk_1 = __importDefault(require("chalk"));
const fs = __importStar(require("fs-extra"));
const subtitle_1 = require("subtitle");
// import { parse, resync, stringify } from 'subtitle';
const uuid_1 = require("uuid");
/* cSpell:disable */
const xml_formatter_1 = __importDefault(require("xml-formatter"));
/* cSpell:enable */
const resources_1 = require("./constants/resources");
const template_1 = require("./template");
function runParse(params) {
    const list = [];
    fs.createReadStream(params.srtPath)
        .pipe(subtitle_1.parse())
        .pipe(subtitle_1.map((node) => {
        if (node.type === 'cue') {
            // eslint-disable-next-line functional/immutable-data
            node.data.text = node.data.text.replace(/"/g, '&#34;');
        }
        return node;
    }))
        .on('data', (node) => {
        // eslint-disable-next-line functional/immutable-data
        list.push(node);
    })
        .on('error', (err) => {
        console.log(chalk_1.default.blue.bgRed.bold(err));
    })
        .on('finish', () => {
        const lastCue = list.slice(-1)[0];
        const totalCueTime = lastCue.data.end;
        const fileName = params.srtPath.replace(/(.+)\/(.+)$/, '$2');
        const projectName = params.projectName || fileName;
        /* cSpell:disable */
        const outputPath = params.outputPath + '/' + fileName + '.fcpxml';
        const eventName = params.eventName || 'srt2fcpxml_node';
        /* cSpell:enable */
        const resourceConfig = resources_1.resources[params.rateKey];
        const gap = params.gap;
        const isUsePlugin = params.isUsePlugin;
        const config = {
            cuesTemplate: template_1.CueTemplate(list, resourceConfig, gap, isUsePlugin).join(''),
            project: {
                name: projectName,
                uid: uuid_1.v4(),
                modDate: 'today',
            },
            event: {
                name: eventName,
                uid: uuid_1.v4(),
            },
            totalCueTime: totalCueTime,
            resources: resourceConfig,
            gap,
            isUsePlugin,
        };
        const fcpXMl = template_1.MainTemplate(config, resourceConfig);
        const fcpXmlFile = fs.createWriteStream(outputPath);
        /* cSpell:disable */
        const formattedXml = xml_formatter_1.default(fcpXMl, {
            indentation: '  ',
            filter: (node) => {
                return node;
            },
            collapseContent: true,
            lineSeparator: '\n',
        });
        fcpXmlFile.write(formattedXml);
        fcpXmlFile.end(() => {
            console.log(chalk_1.default.greenBright.bold(`success! the output file are ${outputPath}`));
        });
    });
}
exports.Parser = (params) => {
    return runParse(params);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsa0RBQTBCO0FBQzFCLDZDQUErQjtBQUMvQix1Q0FBc0M7QUFDdEMsdURBQXVEO0FBQ3ZELCtCQUFvQztBQUNwQyxvQkFBb0I7QUFDcEIsa0VBQXFDO0FBRXJDLG1CQUFtQjtBQUNuQixxREFBa0Q7QUFDbEQseUNBQWdFO0FBV2hFLFNBQVMsUUFBUSxDQUFDLE1BQW1CO0lBQ25DLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNoQixFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUNoQyxJQUFJLENBQUMsZ0JBQUssRUFBRSxDQUFDO1NBQ2IsSUFBSSxDQUNILGNBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ1gsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtZQUN2QixxREFBcUQ7WUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN4RDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDLENBQ0g7U0FDQSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbkIscURBQXFEO1FBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDO1NBQ0QsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxD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