#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
__exportStar(require("./lib/async"), exports);
__exportStar(require("./lib/number"), exports);
var parser_1 = require("./parser");
Object.defineProperty(exports, "Parser", { enumerable: true, get: function () { return parser_1.Parser; } });
const path = __importStar(require("path"));
const confirm_1 = __importDefault(require("@inquirer/confirm"));
const root = __importStar(require("app-root-path"));
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = require("commander");
const fs = __importStar(require("fs-extra"));
const helper_1 = require("./lib/helper");
const parser_2 = require("./parser");
const packageJson = fs.readJsonSync(path.resolve(__dirname, '../../', 'package.json'));
commander_1.program
    .version(packageJson.version)
    .requiredOption('-s, --srt <source>', 'srt file path')
    .option('-o, --output <output>', 'output dir name [default current]')
    .option('-r, --rate <rate>', 'rate: default 30, AKA:23.98,24,25,29.87,30,50,59.94,60')
    .option('-e, --event <event>', 'event name')
    .option('-p, --project <project>', 'project name')
    .option('-c, --custom', 'use custom plugin')
    .option('-g, --gap <gap>', 'gap: number,default 3.6');
commander_1.program.parse(process.argv);
const mainProcess = (isUsePlugin = false) => {
    if (commander_1.program.opts().srt) {
        const srtParam = commander_1.program.opts().srt;
        const outputParam = commander_1.program.opts().output || root.path;
        const rateParam = helper_1.formateRateKey(commander_1.program.opts().rate);
        /* cSpell:disable */
        const eventName = commander_1.program.opts().event || 'srt2fcpxml_node';
        const projectName = commander_1.program.opts().project;
        const gap = parseFloat(commander_1.program.opts().gap);
        if (helper_1.checkSrtPath(srtParam) && helper_1.checkRate(rateParam)) {
            parser_2.Parser({
                srtPath: srtParam,
                outputPath: outputParam,
                eventName,
                rateKey: rateParam,
                projectName,
                gap,
                isUsePlugin,
            });
        }
    }
};
if (commander_1.program.opts().custom) {
    (async () => {
        const answer = await confirm_1.default({
            message: 'Hey, Do you want use custom subtitle fcpx plugin? \n will copy file to your \n ~/Movies/Motion Templates.localized/Titles.localized ',
        });
        if (answer) {
            helper_1.copyPlugin();
        }
        else {
            console.log(chalk_1.default.yellowBright.bold('please copy that plugin by yourself'));
        }
        mainProcess(true);
    })();
}
else {
    mainProcess();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSw4Q0FBNEI7QUFDNUIsK0NBQTZCO0FBQzdCLG1DQUFrQztBQUF6QixnR0FBQSxNQUFNLE9BQUE7QUFDZiwyQ0FBNkI7QUFFN0IsZ0VBQXdDO0FBQ3hDLG9EQUFzQztBQUN0QyxrREFBMEI7QUFDMUIseUNBQW9DO0FBQ3BDLDZDQUErQjtBQUUvQix5Q0FLc0I7QUFDdEIscUNBQWtDO0FBRWxDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FDbEQsQ0FBQztBQUNGLG1CQUFPO0tBQ0osT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7S0FDNUIsY0FBYyxDQUFDLG9CQUFvQixFQUFFLGVBQWUsQ0FBQztLQUNyRCxNQUFNLENBQUMsdUJBQXVCLEVBQUUsbUNBQW1DLENBQUM7S0FDcEUsTUFBTSxDQUNMLG1CQUFtQixFQUNuQix3REFBd0QsQ0FDekQ7S0FDQSxNQUFNLENBQUMscUJBQXFCLEVBQUUsWUFBWSxDQUFDO0tBQzNDLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxjQUFjLENBQUM7S0FDakQsTUFBTSxDQUFDLGNBQWMsRUFBRSxtQkFBbUIsQ0FBQztLQUMzQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUV4RCxtQkFBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFNUIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxXQUFXLEdBQUcsS0FBSyxFQUFFLEVBQUU7SUFDMUMsSUFBSSxtQkFBTyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRTtRQUN0QixNQUFNLFFBQVEsR0FBRyxtQkFBTyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNwQyxNQUFNLFdBQVcsR0FBRyxtQkFBTyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3ZELE1BQU0sU0FBUyxHQUFHLHVCQUFjLENBQUMsbUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RCxvQkFBb0I7UUFDcEIsTUFBTSxTQUFTLEdBQUcsbUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLElBQUksaUJBQWlCLENBQUM7UUFDNUQsTUFBTSxXQUFXLEdBQUcsbUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7UUFDM0MsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLG1CQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFM0MsSUFBSSxxQkFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLGtCQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbEQsZUFBTSxDQUFDO2dCQUNMLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixVQUFVLEVBQUUsV0FBVztnQkFDdkIsU0FBUztnQkFDVCxPQUFPLEVBQUUsU0FBUztnQkFDbEIsV0FBVztnQkFDWCxHQUFHO2dCQUNILFdBQVc7YUFDWixDQUFDLENBQUM7U0FDSjtLQUNGO0FBQ0gsQ0FBQyxDQUFDO0FBQ0YsSUFBSSxtQkFBTyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRTtJQUN6QixDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ1YsTUFBTSxNQUFNLEdBQUcsTUFBTSxpQkFBTyxDQUFDO1lBQzNCLE9BQU8sRUFDTCxzSUFBc0k7U0FDekksQ0FBQyxDQUFDO1FBQ0gsSUFBSSxNQUFNLEVBQUU7WUFDVixtQkFBVSxFQUFFLENBQUM7U0FDZDthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FDVCxlQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxDQUMvRCxDQUFDO1NBQ0g7UUFDRCxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztDQUNOO0tBQU07SUFDTCxXQUFXLEVBQUUsQ0FBQztDQUNmIn0=